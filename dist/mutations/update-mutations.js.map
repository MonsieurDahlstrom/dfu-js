{"version":3,"sources":["../../src/mutations/update-mutations.js"],"names":["MutationTypes","UpdateMutations","ADD_UPDATE","state","update","updateIndex","updates","indexOf","push","splice","MODIFY_UPDATE","REMOVE_UPDATE","transfersToRemove","transfers","filter","transfer","objectsToRemove","objects","includes","object","writesToRemove","writes","write","transferObject","writeIndex","objectIndex","transferIndex"],"mappings":";;;;;;;;;;;;;;;;AAAA;;IAAYA,a;;AACZ;;;;;;;;AAEA,IAAMC,0FACHD,cAAcE,UADX,YACwBC,KADxB,EAC+BC,MAD/B,EACuC;AACzC,MAAMC,cAAcF,MAAMG,OAAN,CAAcC,OAAd,CAAsBH,MAAtB,CAApB;AACA,MAAIC,cAAc,CAAlB,EAAqB;AACnBF,UAAMG,OAAN,CAAcE,IAAd,CAAmBJ,MAAnB;AACD,GAFD,MAEO;AACLD,UAAMG,OAAN,CAAcG,MAAd,CAAqBJ,WAArB,EAAiC,CAAjC,EAAmCD,MAAnC;AACD;AACF,CARG,mDASHJ,cAAcU,aATX,YAS2BP,KAT3B,EASkCC,MATlC,EAS0C;AAC5C,MAAMC,cAAcF,MAAMG,OAAN,CAAcC,OAAd,CAAsBH,MAAtB,CAApB;AACA,MAAIC,eAAe,CAAnB,EAAsB;AACpBF,UAAMG,OAAN,CAAcG,MAAd,CAAqBJ,WAArB,EAAiC,CAAjC,EAAmCD,MAAnC;AACD;AACF,CAdG,mDAeHJ,cAAcW,aAfX,YAe2BR,KAf3B,EAekCC,MAflC,EAe0C;AAE5C,MAAIQ,oBAAoBT,MAAMU,SAAN,CAAgBC,MAAhB,CAAuB;AAAA,WAAYC,SAASX,MAAT,KAAoBA,MAAhC;AAAA,GAAvB,CAAxB;;AAEA,MAAIY,kBAAkBb,MAAMc,OAAN,CAAcH,MAAd,CAAqB;AAAA,WAAUF,kBAAkBM,QAAlB,CAA2BC,OAAOJ,QAAlC,CAAV;AAAA,GAArB,CAAtB;;AAEA,MAAIK,iBAAkBjB,MAAMkB,MAAN,CAAaP,MAAb,CAAoB;AAAA,WAASE,gBAAgBE,QAAhB,CAAyBI,MAAMC,cAA/B,CAAT;AAAA,GAApB,CAAtB;AAN4C;AAAA;AAAA;;AAAA;AAO5C,oDAAiBH,cAAjB,4GAAiC;AAAA,UAAzBE,KAAyB;;AAC/B,UAAIE,aAAarB,MAAMkB,MAAN,CAAad,OAAb,CAAqBe,KAArB,CAAjB;AACA,UAAGE,cAAc,CAAjB,EAAoB;AAClBrB,cAAMkB,MAAN,CAAaZ,MAAb,CAAoBe,UAApB,EAA+B,CAA/B;AACD;AACF;AAZ2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAa5C,qDAAkBR,eAAlB,iHAAmC;AAAA,UAA3BG,MAA2B;;AACjC,UAAIM,cAActB,MAAMc,OAAN,CAAcV,OAAd,CAAsBY,MAAtB,CAAlB;AACA,UAAGM,eAAe,CAAlB,EAAqB;AACnBtB,cAAMc,OAAN,CAAcR,MAAd,CAAqBgB,WAArB,EAAiC,CAAjC;AACD;AACF;AAlB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAmB5C,qDAAoBb,iBAApB,iHAAuC;AAAA,UAA/BG,QAA+B;;AACrC,UAAIW,gBAAgBvB,MAAMU,SAAN,CAAgBN,OAAhB,CAAwBQ,QAAxB,CAApB;AACA,UAAIW,iBAAiB,CAArB,EAAwB;AACtBvB,cAAMU,SAAN,CAAgBJ,MAAhB,CAAuBiB,aAAvB,EAAqC,CAArC;AACD;AACF;AAxB2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA0B5C,MAAKrB,cAAcF,MAAMG,OAAN,CAAcC,OAAd,CAAsBH,MAAtB,CAAnB;AACA,MAAIC,eAAe,CAAnB,EAAsB;AACpBF,UAAMG,OAAN,CAAcG,MAAd,CAAqBJ,WAArB,EAAiC,CAAjC;AACD;AACF,CA7CG,oBAAN;;kBAgDeJ,e","file":"update-mutations.js","sourcesContent":["import * as MutationTypes from '../mutation-types'\nimport TrannsmissionStatus from '../models/transmission-types'\n\nconst UpdateMutations = {\n  [MutationTypes.ADD_UPDATE] (state, update) {\n    const updateIndex = state.updates.indexOf(update)\n    if (updateIndex < 0) {\n      state.updates.push(update)\n    } else {\n      state.updates.splice(updateIndex,1,update)\n    }\n  },\n  [MutationTypes.MODIFY_UPDATE] (state, update) {\n    const updateIndex = state.updates.indexOf(update)\n    if (updateIndex >= 0) {\n      state.updates.splice(updateIndex,1,update)\n    }\n  },\n  [MutationTypes.REMOVE_UPDATE] (state, update) {\n    /** Find all Transfers for an update **/\n    let transfersToRemove = state.transfers.filter(transfer => transfer.update === update )\n    /** Find all objects for Transfers**/\n    let objectsToRemove = state.objects.filter(object => transfersToRemove.includes(object.transfer))\n    /** Find all writes for a TransferObjects**/\n    let writesToRemove =  state.writes.filter(write => objectsToRemove.includes(write.transferObject))\n    for(var write of writesToRemove) {\n      let writeIndex = state.writes.indexOf(write)\n      if(writeIndex >= 0) {\n        state.writes.splice(writeIndex,1)\n      }\n    }\n    for(var object of objectsToRemove) {\n      let objectIndex = state.objects.indexOf(object)\n      if(objectIndex >= 0) {\n        state.objects.splice(objectIndex,1)\n      }\n    }\n    for(var transfer of transfersToRemove) {\n      var transferIndex = state.transfers.indexOf(transfer)\n      if (transferIndex >= 0) {\n        state.transfers.splice(transferIndex,1)\n      }\n    }\n    /** Finally remove the update**/\n    let  updateIndex = state.updates.indexOf(update)\n    if (updateIndex >= 0) {\n      state.updates.splice(updateIndex,1)\n    }\n  }\n}\n\nexport default UpdateMutations\n"]}