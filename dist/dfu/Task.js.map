{"version":3,"sources":["../../src/dfu/Task.js"],"names":["TaskType","CREATE","SET_PRN","CALCULATE_CHECKSUM","EXECUTE","SELECT","RESPONSE_CODE","TaskResult","INVALID_CODE","SUCCESS","OPCODE_NOT_SUPPORTED","INVALID_PARAMETER","INSUFFICIENT_RESOURCES","INVALID_OBJECT","UNSUPPORTED_TYPE","OPERATION_NOT_PERMITTED","OPERATION_FAILED","Task","characteristicToWriteTo","bytesToWrite","commandToExecute","opcode","buffer","characteristic","task","onCompleition","Error","writeValue","setTimeout","console","log","objectType","dataView","DataView","ArrayBuffer","setUint8","length","setUint32","packageCount","setUint16","module","exports"],"mappings":"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","file":"Task.js","sourcesContent":["// Copyright (c) 2017 Monsieur Dahlstr√∂m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst TaskType = {\n  CREATE: 0x01,\n  SET_PRN: 0x02,\n  CALCULATE_CHECKSUM: 0x03,\n  EXECUTE: 0x04,\n  SELECT: 0x06,\n  RESPONSE_CODE: 0x60\n}\n\nconst TaskResult = {\n  INVALID_CODE: 0x00,\n  SUCCESS: 0x01,\n  OPCODE_NOT_SUPPORTED: 0x02,\n  INVALID_PARAMETER: 0x03,\n  INSUFFICIENT_RESOURCES: 0x04,\n  INVALID_OBJECT: 0x05,\n  UNSUPPORTED_TYPE: 0x07,\n  OPERATION_NOT_PERMITTED: 0x08,\n  OPERATION_FAILED: 0x0A\n}\n\nclass Task {\n\n  constructor (characteristicToWriteTo, bytesToWrite, commandToExecute) {\n    this.opcode = commandToExecute\n    this.buffer = bytesToWrite\n    this.characteristic = characteristicToWriteTo\n  }\n\n  static async Worker (task, onCompleition) {\n    if (task instanceof Task === false) {\n      throw new Error('task not of type Task')\n    }\n    if (!onCompleition) {\n      throw new Error('onCompleition is not set')\n    }\n    try {\n      await task.characteristic.writeValue(task.buffer)\n      setTimeout(function () {\n        onCompleition()\n      }, 100)\n    } catch (exception) {\n      console.log(exception)\n      onCompleition('BLE Transfer Failed')\n    }\n  }\n\n  static verify (objectType, characteristic) {\n    let dataView = new DataView(new ArrayBuffer(2))\n    dataView.setUint8(0, TaskType.SELECT)\n    dataView.setUint8(1, objectType)\n    return new Task(characteristic, dataView.buffer, TaskType.SELECT)\n  }\n\n  static create (objectType, length, characteristic) {\n    let dataView = new DataView(new ArrayBuffer(6))\n    dataView.setUint8(0, TaskType.CREATE)\n    dataView.setUint8(1, objectType)\n    /** Data length set to little endian converstion */\n    dataView.setUint32(2, length, true)\n    return new Task(characteristic, dataView.buffer, TaskType.CREATE)\n  }\n\n  static setPacketReturnNotification (packageCount, characteristic) {\n    let dataView = new DataView(new ArrayBuffer(3))\n    dataView.setUint8(0, TaskType.SET_PRN)\n    /** Set the package received notification to the number of expected packages */\n    dataView.setUint16(1, packageCount, true)\n    return new Task(characteristic, dataView.buffer, TaskType.SET_PRN)\n  }\n\n  static writePackage (buffer, characteristic) {\n    return new Task(characteristic, buffer)\n  }\n\n  static checksum (characteristic) {\n    let dataView = new DataView(new ArrayBuffer(1))\n    dataView.setUint8(0, TaskType.CALCULATE_CHECKSUM)\n    return new Task(characteristic, dataView.buffer, TaskType.CALCULATE_CHECKSUM)\n  }\n\n  static execute (characteristic) {\n    let dataView = new DataView(new ArrayBuffer(1))\n    dataView.setUint8(0, TaskType.EXECUTE)\n    return new Task(characteristic, dataView.buffer, TaskType.EXECUTE)\n  }\n}\n\nmodule.exports.Task = Task\nmodule.exports.TaskType = TaskType\nmodule.exports.TaskResult = TaskResult\n"]}