{"version":3,"sources":["../src/state-machine.js"],"names":["StateMachineStates","NOT_CONFIGURED","IDLE","TRANSFERING","COMPLETE","FAILED","StateMachine","webBluetoothControlPoint","webBluetoothPacketPoint","setControlPoint","setPacketPoint","worker","fileTransfers","work","controlpointCharacteristic","packetCharacteristic","state","webBluetoothCharacteristic","currentTransfer","progress","transfer","push","error","kill","firmware","Error","sections","section","addTransfer","dat","Command","bin","Data","module","exports","States"],"mappings":";;;;;;;;;;;;;;AAoBA;;;;AACA;;AACA;;;;AAUA,IAAMA,qBAAqB;AACzBC,kBAAgB,IADS;AAEzBC,QAAM,IAFmB;AAGzBC,eAAa,IAHY;AAIzBC,YAAU,IAJe;AAKzBC,UAAQ;AALiB,CAA3B;;IAaMC,Y;AAEJ,wBAAaC,wBAAb,EAAuCC,uBAAvC,EAAgE;AAAA;;AAC9D,SAAKC,eAAL,CAAqBF,wBAArB;AACA,SAAKG,cAAL,CAAoBF,uBAApB;;AAEA,SAAKG,MAAL,GAAc,yBAAd;AACA,SAAKC,aAAL,GAAqB,qBAAM,KAAKD,MAAL,CAAYE,IAAlB,EAAwB,CAAxB,CAArB;AACA,QAAI,KAAKC,0BAAL,IAAmC,KAAKC,oBAA5C,EAAkE;AAChE,WAAKC,KAAL,GAAahB,mBAAmBE,IAAhC;AACD,KAFD,MAEO;AACL,WAAKc,KAAL,GAAahB,mBAAmBC,cAAhC;AACD;AACF;;;;oCAEgBgB,0B,EAA4B;AAC3C,WAAKH,0BAAL,GAAkCG,0BAAlC;AACD;;;mCAEeA,0B,EAA4B;AAC1C,WAAKF,oBAAL,GAA4BE,0BAA5B;AACD;;;+BAEW;AACV,cAAQ,KAAKD,KAAb;AACE,aAAKhB,mBAAmBC,cAAxB;AACE,iBAAO,GAAP;AACF,aAAKD,mBAAmBE,IAAxB;AACE,iBAAO,GAAP;AACF,aAAKF,mBAAmBI,QAAxB;AACE,iBAAO,GAAP;AACF,aAAKJ,mBAAmBK,MAAxB;AACE,iBAAO,GAAP;AACF,aAAKL,mBAAmBG,WAAxB;AACE,iBAAO,KAAKQ,MAAL,CAAYO,eAAZ,CAA4BC,QAA5B,EAAP;AAVJ;AAYD;;;gCAIYC,Q,EAAU;AAAA;;AACrB,WAAKR,aAAL,CAAmBS,IAAnB,CAAwBD,QAAxB,EAAkC,UAACE,KAAD,EAAW;AAC3C,YAAIA,KAAJ,EAAW;AACT,gBAAKV,aAAL,CAAmBW,IAAnB;AACD;AACF,OAJD;AAKD;;;iCAKaC,Q,EAAU;AACtB,UAAI,KAAKR,KAAL,KAAehB,mBAAmBC,cAAtC,EAAsD;AACpD,cAAM,IAAIwB,KAAJ,CAAU,+DAAV,CAAN;AACD;AACD,UAAI,KAAKT,KAAL,KAAehB,mBAAmBE,IAAtC,EAA4C;AAC1C,cAAM,IAAIuB,KAAJ,CAAU,qCAAV,CAAN;AACD;AACD,UAAID,2CAAiC,KAArC,EAA4C;AAC1C,cAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;AATqB;AAAA;AAAA;;AAAA;AAUtB,wDAAmBD,SAASE,QAA5B,4GAAsC;AAAA,cAA9BC,OAA8B;;AACpC,eAAKC,WAAL,CAAiB,kBAAaD,QAAQE,GAArB,EAA0B,KAAKf,0BAA/B,EAA2D,KAAKC,oBAAhE,EAAsF,wBAAmBe,OAAzG,CAAjB;AACA,eAAKF,WAAL,CAAiB,kBAAaD,QAAQI,GAArB,EAA0B,KAAKjB,0BAA/B,EAA2D,KAAKC,oBAAhE,EAAsF,wBAAmBiB,IAAzG,CAAjB;AACD;AAbqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcvB;;;;;AAIHC,OAAOC,OAAP,CAAeC,MAAf,GAAwBnC,kBAAxB;AACAiC,OAAOC,OAAP,CAAe5B,YAAf,GAA8BA,YAA9B","file":"state-machine.js","sourcesContent":["// Copyright (c) 2017 Monsieur DahlstrÃ¶m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nimport queue from 'async/queue'\nimport {Firmware} from './firmware'\nimport {Transfer, TransferWorker, TransferObjectType} from './dfu'\n\n/**\nThe states a DFU StateMachine can have:\n  - NOT_CONFIGURED, bluetooth characteristics have not been set\n  - IDLE, state machine is ready for use\n  - TRANSFERING, state machine is i the process of updating a device\n  - COMPLETE, indicates that a device update has been completed\n  - FAILED, device update failed\n**/\nconst StateMachineStates = {\n  NOT_CONFIGURED: 0x00,\n  IDLE: 0x01,\n  TRANSFERING: 0x02,\n  COMPLETE: 0x03,\n  FAILED: 0x04\n}\n\n/**\nMain Facade class to the library\n  Create StateMachine with WebBluetoothCharacteristics representing the data and control point\n  Monitor the state property and use the function sendFirmware() to send a DFU zip.\n**/\nclass StateMachine {\n\n  constructor (webBluetoothControlPoint, webBluetoothPacketPoint) {\n    this.setControlPoint(webBluetoothControlPoint)\n    this.setPacketPoint(webBluetoothPacketPoint)\n    /** TODO: The queue should have better error reporting which are tied to state */\n    this.worker = new TransferWorker()\n    this.fileTransfers = queue(this.worker.work, 1)\n    if (this.controlpointCharacteristic && this.packetCharacteristic) {\n      this.state = StateMachineStates.IDLE\n    } else {\n      this.state = StateMachineStates.NOT_CONFIGURED\n    }\n  }\n\n  setControlPoint (webBluetoothCharacteristic) {\n    this.controlpointCharacteristic = webBluetoothCharacteristic\n  }\n\n  setPacketPoint (webBluetoothCharacteristic) {\n    this.packetCharacteristic = webBluetoothCharacteristic\n  }\n\n  progress () {\n    switch (this.state) {\n      case StateMachineStates.NOT_CONFIGURED:\n        return 0.0\n      case StateMachineStates.IDLE:\n        return 0.0\n      case StateMachineStates.COMPLETE:\n        return 1.0\n      case StateMachineStates.FAILED:\n        return 1.0\n      case StateMachineStates.TRANSFERING:\n        return this.worker.currentTransfer.progress()\n    }\n  }\n  /**\n    Internal method used to slot each part of a dfu zip for transfer to device\n  **/\n  addTransfer (transfer) {\n    this.fileTransfers.push(transfer, (error) => {\n      if (error) {\n        this.fileTransfers.kill()\n      }\n    })\n  }\n\n  /**\n    Send a firmware to a device. Throws when parameter or state is invalid for sending a firmware\n  **/\n  sendFirmware (firmware) {\n    if (this.state === StateMachineStates.NOT_CONFIGURED) {\n      throw new Error('StateMachine is not configured with bluetooth characteristics')\n    }\n    if (this.state !== StateMachineStates.IDLE) {\n      throw new Error('Can only initate transfer when idle')\n    }\n    if (firmware instanceof Firmware === false) {\n      throw new Error('Firmware needs to be of class Firmware')\n    }\n    for(var section of firmware.sections) {\n      this.addTransfer(new Transfer(section.dat, this.controlpointCharacteristic, this.packetCharacteristic, TransferObjectType.Command))\n      this.addTransfer(new Transfer(section.bin, this.controlpointCharacteristic, this.packetCharacteristic, TransferObjectType.Data))\n    }\n  }\n\n}\n\nmodule.exports.States = StateMachineStates\nmodule.exports.StateMachine = StateMachine\n"]}