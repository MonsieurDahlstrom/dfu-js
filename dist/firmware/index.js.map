{"version":3,"sources":["../../src/firmware/index.js"],"names":["FirmwareType","Application","Bootloader","Softdevice","SoftdeviceBootloader","Invalid","NotConfigured","NOT_IN_USE_1","NOT_IN_USE_2","Firmware","zipFile","type","zip","sections","file","async","content","json","JSON","parse","manifest","application","bin_file","bin","dat_file","dat","section","push","console","log","bootloader","e","softdevice","softdevice_bootloader","module","exports","FirmwareSection"],"mappings":"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","file":"index.js","sourcesContent":["// Copyright (c) 2017 Monsieur Dahlstr√∂m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport {Section} from './Section'\n\n/**\n  The different types of firmware updates a zip file can represent\n    currently only Application is fully implmented\n    http://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v12.2.0/ble_sdk_app_dfu_bootloader.html?cp=4_0_1_4_2_3_2#lib_dfu_image\n**/\nconst FirmwareType = {\n  Application: 0x01,\n  Bootloader: 0x02,\n  Softdevice: 0x04,\n  SoftdeviceBootloader: 0x08,\n  Invalid: 0x10,\n  NotConfigured: 0x20,\n  NOT_IN_USE_1: 0x40,\n  NOT_IN_USE_2: 0x80\n}\n\n/**\nFirmware, instances takes a zip file as input and unpacks the compressed update\n**/\nclass Firmware {\n\n  /** Create a new instance based on zip file and set inital state **/\n  constructor (zipFile) {\n    this.type = FirmwareType.NotConfigured\n    this.zip = zipFile\n    this.sections = []\n  }\n\n  /** parses the manifest and unpack the binaries **/\n  async parseManifest () {\n    if (!this.zip) {\n      this.type = FirmwareType.Invalid\n      return\n    }\n    let content = await this.zip.file('manifest.json').async('string')\n    let json = JSON.parse(content)\n    if (json.manifest.application) {\n      try {\n        let bin = await this.zip.file(json.manifest.application.bin_file).async('uint8Array')\n        let dat = await this.zip.file(json.manifest.application.dat_file).async('uint8Array')\n        let section = new Section(bin, dat, FirmwareType.Application)\n        this.sections.push(section)\n        this.type = FirmwareType.Application\n      } catch (e) {\n        console.log(e)\n      }\n    } else if (json.manifest.bootloader) {\n      try {\n        let bin = this.zip.file(json.manifest.bootloader.bin_file, 'uint8Array')\n        let dat = this.zip.file(json.manifest.bootloader.dat_file, 'uint8Array')\n        let section = new Section(bin, dat, FirmwareType.Bootloader)\n        this.sections.push(section)\n        this.type = FirmwareType.Bootloader\n      } catch (e) {\n        console.log('WWFirmwareUpdate.parseManifest bootloader ' + e)\n      }\n    } else if (json.manifest.softdevice) {\n      try {\n        let bin = this.zip.file(json.manifest.softdevice.bin_file, 'uint8Array')\n        let dat = this.zip.file(json.manifest.softdevice.dat_file, 'uint8Array')\n        let section = new Section(bin, dat, FirmwareType.Application)\n        this.sections.push(section)\n        this.type = FirmwareType.Softdevice\n      } catch (e) {\n        console.log('WWFirmwareUpdate.parseManifest softdevice ' + e)\n      }\n    } else if (json.manifest.softdevice_bootloader) {\n      try {\n        let bin = this.zip.file(json.manifest.softdevice_bootloader.bin_file, 'uint8Array')\n        let dat = this.zip.file(json.manifest.softdevice_bootloader.dat_file, 'uint8Array')\n        let section = new Section(bin, dat, FirmwareType.SoftdeviceBootloader)\n        this.sections.push(section)\n        this.type = FirmwareType.SoftdeviceBootloader\n      } catch (e) {\n        console.log('WWFirmwareUpdate.parseManifest softdevice & bootloader ' + e)\n      }\n\n    } else {\n      this.type = FirmwareType.Invalid\n    }\n  }\n}\n\nmodule.exports.Firmware = Firmware\nmodule.exports.FirmwareType = FirmwareType\nmodule.exports.FirmwareSection = Section\n"]}