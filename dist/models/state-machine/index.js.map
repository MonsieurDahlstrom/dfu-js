{"version":3,"sources":["../../../src/models/state-machine/index.js"],"names":["stateSymbol","controlPointSymbol","packetPointSymbol","transfersSymbol","queueSymbol","progressSymbol","StateMachine","webBluetoothControlPoint","webBluetoothPacketPoint","undefined","IDLE","NOT_CONFIGURED","completed","size","state","COMPLETE","FAILED","TRANSFERING","progress","transfers","transfer","Completed","file","length","Transfer","emit","dfuStateMachine","push","queue","error","kill","firmware","Error","updateFunc","event","calculateProgress","firmwareSize","sections","section","datTransfer","dat","controlPoint","packetPoint","Command","on","binTransfer","bin","Data","addTransfer","value","webBluetoothCharacteristic","module","exports","DFUStateMachineStates","DFUStateMachine"],"mappings":"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","file":"index.js","sourcesContent":["// Copyright (c) 2017 Monsieur DahlstrÃ¶m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport queue from 'async/queue'\nimport EventEmitter from 'events'\n\nimport {Firmware, FirmwareType} from '../firmware'\nimport {Transfer, TransferStates, TransferWorker, CurrentTransfer, TransferTypes} from '../transfer'\nimport {Task} from '../task'\nimport StateMachineStates from './states'\n\n/**\nMain Facade class to the library\n  Create StateMachine with WebBluetoothCharacteristics representing the data and control point\n  Monitor the state property and use the function sendFirmware() to send a DFU zip.\n**/\n\nlet stateSymbol = Symbol()\nlet controlPointSymbol = Symbol()\nlet packetPointSymbol = Symbol()\nlet transfersSymbol = Symbol()\nlet queueSymbol = Symbol()\nlet progressSymbol = Symbol()\n\nclass StateMachine extends EventEmitter {\n\n  constructor (webBluetoothControlPoint, webBluetoothPacketPoint) {\n    super()\n    this[controlPointSymbol] = webBluetoothControlPoint\n    this[packetPointSymbol] = webBluetoothPacketPoint\n    if (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined) {\n      this[stateSymbol] = StateMachineStates.IDLE\n    } else {\n      this[stateSymbol] = StateMachineStates.NOT_CONFIGURED\n    }\n    this[transfersSymbol] = []\n    this[queueSymbol] = queue(TransferWorker, 1)\n    this[progressSymbol] = {completed: 0.0, size: 1.0}\n  }\n\n  /** get/set **/\n  get state () {\n    return this[stateSymbol]\n  }\n\n  set state (value) {\n    if (value !== this[stateSymbol]) {\n      this[stateSymbol] = value\n      this.emit('stateChanged',{dfuStateMachine: this, state: value})\n    }\n  }\n  /** get/set **/\n\n  get controlPoint () {\n    return this[controlPointSymbol]\n  }\n\n  set controlPoint (webBluetoothCharacteristic) {\n    this[controlPointSymbol] = webBluetoothCharacteristic\n    if (this.state === StateMachineStates.NOT_CONFIGURED && (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined)) {\n      this.state = StateMachineStates.IDLE\n    } else if(this.state === StateMachineStates.IDLE && (this[controlPointSymbol] === undefined ||  this[packetPointSymbol] === undefined)) {\n      this.state = StateMachineStates.NOT_CONFIGURED\n    }\n  }\n\n  /** get/set **/\n\n  get packetPoint () {\n    return this[packetPointSymbol]\n  }\n\n  set packetPoint (webBluetoothCharacteristic) {\n    this[packetPointSymbol] = webBluetoothCharacteristic\n    if (this.state === StateMachineStates.NOT_CONFIGURED && (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined)) {\n      this.state = StateMachineStates.IDLE\n    } else if(this.state === StateMachineStates.IDLE && (this[controlPointSymbol] === undefined ||  this[packetPointSymbol] === undefined)) {\n      this.state = StateMachineStates.NOT_CONFIGURED\n    }\n  }\n\n  /** get/set **/\n\n  get transfers () {\n    return this[transfersSymbol]\n  }\n\n\n  /** get/set **/\n\n  get progress () {\n    return this[progressSymbol]\n  }\n\n  /** get/set **/\n\n  get queue () {\n    return this[queueSymbol]\n  }\n\n\n  calculateProgress () {\n    switch (this.state) {\n      case StateMachineStates.NOT_CONFIGURED:\n        this[progressSymbol].completed  = 0.0\n        break\n      case StateMachineStates.IDLE:\n        this[progressSymbol].completed = 0.0\n        break\n      case StateMachineStates.COMPLETE:\n        this[progressSymbol].completed = this[progressSymbol].size\n        break\n      case StateMachineStates.FAILED:\n        this[progressSymbol].completed = this[progressSymbol].size\n        break\n      case StateMachineStates.TRANSFERING:\n        /*\n        if (this.transfers.length > 0) {\n          let completedTransfersCount = this.transfers.reduce((sum,value) => {\n            return (value.state === TransferStates.Failed || value.state === TransferStates.Completed) ? sum + 1 : sum\n          }, 0)\n          let percentageValue = 1.0 / this.transfers.length\n          let newProgress = percentageValue * completedTransfersCount\n          if(CurrentTransfer().state === TransferStates.Transfer) {\n            newProgress += percentageValue * CurrentTransfer().progress\n          }\n          this.progress = newProgress\n        }\n        */\n        var progress = 0\n        for (let transfer of this.transfers) {\n          switch (transfer.state) {\n            case TransferStates.Completed:\n              progress += transfer.file.length\n            case TransferStates.Transfer:\n              progress += transfer.file.length * transfer.progress\n            default:\n              progress += 0\n              break;\n          }\n        }\n        this[progressSymbol].completed = progress\n        break\n    }\n    this.emit('progressChanged',{dfuStateMachine: this, progress: this[progressSymbol]})\n  }\n  /**\n    Internal method used to slot each part of a dfu zip for transfer to device\n  **/\n  addTransfer (transfer) {\n    this.transfers.push(transfer)\n    this.queue.push(transfer, (error) => {\n      if (error) {\n        this.queue.kill()\n        this.state = StateMachineStates.FAILED\n      } else if (transfer.state === StateMachineStates.FAILED) {\n        this.queue.kill()\n        this.state = StateMachineStates.FAILED\n      } else if(this.queue.length() === 0) {\n        this.state = StateMachineStates.COMPLETE\n      }\n    })\n  }\n\n  /**\n    Send a firmware to a device. Throws when parameter or state is invalid for sending a firmware\n  **/\n  sendFirmware (firmware) {\n    if (this.state === StateMachineStates.NOT_CONFIGURED) {\n      throw new Error('StateMachine is not configured with bluetooth characteristics')\n    }\n    if (this.state !== StateMachineStates.IDLE) {\n      throw new Error('Can only initate transfer when idle')\n    }\n    if (firmware instanceof Firmware === false) {\n      throw new Error('Firmware needs to be of class Firmware')\n    }\n    var updateFunc = (event) => {\n      this.calculateProgress()\n    }\n    var firmwareSize = 0\n    for(var section of firmware.sections) {\n      let datTransfer = new Transfer(section.dat, this.controlPoint, this.packetPoint, TransferTypes.Command)\n      datTransfer.on('progressChanged', updateFunc)\n      let binTransfer = new Transfer(section.bin, this.controlPoint, this.packetPoint, TransferTypes.Data)\n      binTransfer.on('progressChanged', updateFunc)\n      this.addTransfer(datTransfer)\n      this.addTransfer(binTransfer)\n      firmwareSize += section.dat.length\n      firmwareSize += section.bin.length\n    }\n    this[progressSymbol].completed = 0\n    this[progressSymbol].size = firmwareSize\n    this.state = StateMachineStates.TRANSFERING\n  }\n\n  reset () {\n    this.queue.kill()\n    this.state = StateMachineStates.IDLE\n  }\n}\n\nmodule.exports.DFUStateMachineStates = StateMachineStates\nmodule.exports.DFUStateMachine = StateMachine\n"]}