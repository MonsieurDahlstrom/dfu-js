{"version":3,"sources":["../../../src/models/state-machine/index.js"],"names":["stateSymbol","controlPointSymbol","packetPointSymbol","transfersSymbol","queueSymbol","progressSymbol","StateMachine","webBluetoothControlPoint","webBluetoothPacketPoint","undefined","IDLE","NOT_CONFIGURED","state","progress","COMPLETE","FAILED","TRANSFERING","transfers","length","completedTransfersCount","reduce","sum","value","Failed","Completed","percentageValue","newProgress","Transfer","transfer","push","queue","error","kill","firmware","Error","sections","section","updateFunc","event","calculateProgress","datTransfer","dat","controlPoint","packetPoint","Command","on","binTransfer","bin","Data","addTransfer","emit","dfuStateMachine","webBluetoothCharacteristic","module","exports","DFUStateMachineStates","DFUStateMachine"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;;;;;AAQA,IAAIA,cAAc,uBAAlB;AACA,IAAIC,qBAAqB,uBAAzB;AACA,IAAIC,oBAAoB,uBAAxB;AACA,IAAIC,kBAAkB,uBAAtB;AACA,IAAIC,cAAc,uBAAlB;AACA,IAAIC,iBAAiB,uBAArB;;IAEMC,Y;;;AAEJ,wBAAaC,wBAAb,EAAuCC,uBAAvC,EAAgE;AAAA;;AAAA;;AAE9D,UAAKP,kBAAL,IAA2BM,wBAA3B;AACA,UAAKL,iBAAL,IAA0BM,uBAA1B;AACA,QAAI,MAAKP,kBAAL,MAA6BQ,SAA7B,IAA0C,MAAKP,iBAAL,MAA4BO,SAA1E,EAAqF;AACnF,YAAKT,WAAL,IAAoB,iBAAmBU,IAAvC;AACD,KAFD,MAEO;AACL,YAAKV,WAAL,IAAoB,iBAAmBW,cAAvC;AACD;AACD,UAAKR,eAAL,IAAwB,EAAxB;AACA,UAAKC,WAAL,IAAoB,+CAAsB,CAAtB,CAApB;AACA,UAAKC,cAAL,IAAuB,GAAvB;AAX8D;AAY/D;;;;wCAqEoB;AACnB,cAAQ,KAAKO,KAAb;AACE,aAAK,iBAAmBD,cAAxB;AACE,eAAKE,QAAL,GAAgB,GAAhB;AACA;AACF,aAAK,iBAAmBH,IAAxB;AACE,eAAKG,QAAL,GAAgB,GAAhB;AACA;AACF,aAAK,iBAAmBC,QAAxB;AACE,eAAKD,QAAL,GAAgB,GAAhB;AACA;AACF,aAAK,iBAAmBE,MAAxB;AACE,eAAKF,QAAL,GAAgB,GAAhB;AACA;AACF,aAAK,iBAAmBG,WAAxB;AACE,cAAI,KAAKC,SAAL,CAAeC,MAAf,GAAwB,CAA5B,EAA+B;AAC7B,gBAAIC,0BAA0B,KAAKF,SAAL,CAAeG,MAAf,CAAsB,UAACC,GAAD,EAAKC,KAAL,EAAe;AACjE,qBAAQA,MAAMV,KAAN,KAAgB,yBAAeW,MAA/B,IAAyCD,MAAMV,KAAN,KAAgB,yBAAeY,SAAzE,GAAsFH,MAAM,CAA5F,GAAgGA,GAAvG;AACD,aAF6B,EAE3B,CAF2B,CAA9B;AAGA,gBAAII,kBAAkB,MAAM,KAAKR,SAAL,CAAeC,MAA3C;AACA,gBAAIQ,cAAcD,kBAAkBN,uBAApC;AACA,gBAAG,iCAAkBP,KAAlB,KAA4B,yBAAee,QAA9C,EAAwD;AACtDD,6BAAeD,kBAAkB,iCAAkBZ,QAAnD;AACD;AACD,iBAAKA,QAAL,GAAgBa,WAAhB;AACD;AACD;AAzBJ;AA2BD;;;gCAIYE,Q,EAAU;AAAA;;AACrB,WAAKX,SAAL,CAAeY,IAAf,CAAoBD,QAApB;AACA,WAAKE,KAAL,CAAWD,IAAX,CAAgBD,QAAhB,EAA0B,UAACG,KAAD,EAAW;AACnC,YAAIA,KAAJ,EAAW;AACT,iBAAKD,KAAL,CAAWE,IAAX;AACA,iBAAKpB,KAAL,GAAa,iBAAmBG,MAAhC;AACD,SAHD,MAGO,IAAIa,SAAShB,KAAT,KAAmB,iBAAmBG,MAA1C,EAAkD;AACvD,iBAAKe,KAAL,CAAWE,IAAX;AACA,iBAAKpB,KAAL,GAAa,iBAAmBG,MAAhC;AACD,SAHM,MAGA,IAAG,OAAKe,KAAL,CAAWZ,MAAX,OAAwB,CAA3B,EAA8B;AACnC,iBAAKN,KAAL,GAAa,iBAAmBE,QAAhC;AACD;AACF,OAVD;AAWD;;;iCAKamB,Q,EAAU;AAAA;;AACtB,UAAI,KAAKrB,KAAL,KAAe,iBAAmBD,cAAtC,EAAsD;AACpD,cAAM,IAAIuB,KAAJ,CAAU,+DAAV,CAAN;AACD;AACD,UAAI,KAAKtB,KAAL,KAAe,iBAAmBF,IAAtC,EAA4C;AAC1C,cAAM,IAAIwB,KAAJ,CAAU,qCAAV,CAAN;AACD;AACD,UAAID,2CAAiC,KAArC,EAA4C;AAC1C,cAAM,IAAIC,KAAJ,CAAU,wCAAV,CAAN;AACD;AATqB;AAAA;AAAA;;AAAA;AAUtB,wDAAmBD,SAASE,QAA5B,4GAAsC;AAAA,cAA9BC,OAA8B;;AACpC,cAAIC,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC1B,mBAAKC,iBAAL;AACD,WAFD;AAGA,cAAIC,cAAc,uBAAaJ,QAAQK,GAArB,EAA0B,KAAKC,YAA/B,EAA6C,KAAKC,WAAlD,EAA+D,wBAAcC,OAA7E,CAAlB;AACAJ,sBAAYK,EAAZ,CAAe,iBAAf,EAAkCR,UAAlC;AACA,cAAIS,cAAc,uBAAaV,QAAQW,GAArB,EAA0B,KAAKL,YAA/B,EAA6C,KAAKC,WAAlD,EAA+D,wBAAcK,IAA7E,CAAlB;AACAF,sBAAYD,EAAZ,CAAe,iBAAf,EAAkCR,UAAlC;AACA,eAAKY,WAAL,CAAiBT,WAAjB;AACA,eAAKS,WAAL,CAAiBH,WAAjB;AACD;AApBqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqBtB,WAAKlC,KAAL,GAAa,iBAAmBI,WAAhC;AACD;;;4BAEQ;AACP,WAAKc,KAAL,CAAWE,IAAX;AACA,WAAKpB,KAAL,GAAa,iBAAmBF,IAAhC;AACD;;;wBA/IY;AACX,aAAO,KAAKV,WAAL,CAAP;AACD,K;sBAEUsB,K,EAAO;AAChB,UAAIA,UAAU,KAAKtB,WAAL,CAAd,EAAiC;AAC/B,aAAKA,WAAL,IAAoBsB,KAApB;AACA,aAAK4B,IAAL,CAAU,cAAV,EAAyB,EAACC,iBAAiB,IAAlB,EAAwBvC,OAAOU,KAA/B,EAAzB;AACD;AACF;;;wBAGmB;AAClB,aAAO,KAAKrB,kBAAL,CAAP;AACD,K;sBAEiBmD,0B,EAA4B;AAC5C,WAAKnD,kBAAL,IAA2BmD,0BAA3B;AACA,UAAI,KAAKxC,KAAL,KAAe,iBAAmBD,cAAlC,IAAqD,KAAKV,kBAAL,MAA6BQ,SAA7B,IAA0C,KAAKP,iBAAL,MAA4BO,SAA/H,EAA2I;AACzI,aAAKG,KAAL,GAAa,iBAAmBF,IAAhC;AACD,OAFD,MAEO,IAAG,KAAKE,KAAL,KAAe,iBAAmBF,IAAlC,KAA2C,KAAKT,kBAAL,MAA6BQ,SAA7B,IAA2C,KAAKP,iBAAL,MAA4BO,SAAlH,CAAH,EAAiI;AACtI,aAAKG,KAAL,GAAa,iBAAmBD,cAAhC;AACD;AACF;;;wBAIkB;AACjB,aAAO,KAAKT,iBAAL,CAAP;AACD,K;sBAEgBkD,0B,EAA4B;AAC3C,WAAKlD,iBAAL,IAA0BkD,0BAA1B;AACA,UAAI,KAAKxC,KAAL,KAAe,iBAAmBD,cAAlC,IAAqD,KAAKV,kBAAL,MAA6BQ,SAA7B,IAA0C,KAAKP,iBAAL,MAA4BO,SAA/H,EAA2I;AACzI,aAAKG,KAAL,GAAa,iBAAmBF,IAAhC;AACD,OAFD,MAEO,IAAG,KAAKE,KAAL,KAAe,iBAAmBF,IAAlC,KAA2C,KAAKT,kBAAL,MAA6BQ,SAA7B,IAA2C,KAAKP,iBAAL,MAA4BO,SAAlH,CAAH,EAAiI;AACtI,aAAKG,KAAL,GAAa,iBAAmBD,cAAhC;AACD;AACF;;;wBAIgB;AACf,aAAO,KAAKR,eAAL,CAAP;AACD;;;wBAKe;AACd,aAAO,KAAKE,cAAL,CAAP;AACD,K;sBAEaiB,K,EAAO;AACnB,UAAIA,UAAU,KAAKjB,cAAL,CAAd,EAAoC;AAClC,aAAKA,cAAL,IAAuBiB,KAAvB;AACA,aAAK4B,IAAL,CAAU,iBAAV,EAA4B,EAACC,iBAAiB,IAAlB,EAAwBtC,UAAUS,KAAlC,EAA5B;AACD;AACF;;;wBAGY;AACX,aAAO,KAAKlB,WAAL,CAAP;AACD;;;;;AAmFHiD,OAAOC,OAAP,CAAeC,qBAAf;AACAF,OAAOC,OAAP,CAAeE,eAAf,GAAiClD,YAAjC","file":"index.js","sourcesContent":["// Copyright (c) 2017 Monsieur DahlstrÃ¶m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport queue from 'async/queue'\nimport EventEmitter from 'events'\n\nimport {Firmware, FirmwareType} from '../firmware'\nimport {Transfer, TransferStates, TransferWorker, CurrentTransfer, TransferTypes} from '../transfer'\nimport {Task} from '../task'\nimport StateMachineStates from './states'\n\n/**\nMain Facade class to the library\n  Create StateMachine with WebBluetoothCharacteristics representing the data and control point\n  Monitor the state property and use the function sendFirmware() to send a DFU zip.\n**/\n\nlet stateSymbol = Symbol()\nlet controlPointSymbol = Symbol()\nlet packetPointSymbol = Symbol()\nlet transfersSymbol = Symbol()\nlet queueSymbol = Symbol()\nlet progressSymbol = Symbol()\n\nclass StateMachine extends EventEmitter {\n\n  constructor (webBluetoothControlPoint, webBluetoothPacketPoint) {\n    super()\n    this[controlPointSymbol] = webBluetoothControlPoint\n    this[packetPointSymbol] = webBluetoothPacketPoint\n    if (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined) {\n      this[stateSymbol] = StateMachineStates.IDLE\n    } else {\n      this[stateSymbol] = StateMachineStates.NOT_CONFIGURED\n    }\n    this[transfersSymbol] = []\n    this[queueSymbol] = queue(TransferWorker, 1)\n    this[progressSymbol] = 0.0\n  }\n\n  /** get/set **/\n  get state () {\n    return this[stateSymbol]\n  }\n\n  set state (value) {\n    if (value !== this[stateSymbol]) {\n      this[stateSymbol] = value\n      this.emit('stateChanged',{dfuStateMachine: this, state: value})\n    }\n  }\n  /** get/set **/\n\n  get controlPoint () {\n    return this[controlPointSymbol]\n  }\n\n  set controlPoint (webBluetoothCharacteristic) {\n    this[controlPointSymbol] = webBluetoothCharacteristic\n    if (this.state === StateMachineStates.NOT_CONFIGURED && (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined)) {\n      this.state = StateMachineStates.IDLE\n    } else if(this.state === StateMachineStates.IDLE && (this[controlPointSymbol] === undefined ||  this[packetPointSymbol] === undefined)) {\n      this.state = StateMachineStates.NOT_CONFIGURED\n    }\n  }\n\n  /** get/set **/\n\n  get packetPoint () {\n    return this[packetPointSymbol]\n  }\n\n  set packetPoint (webBluetoothCharacteristic) {\n    this[packetPointSymbol] = webBluetoothCharacteristic\n    if (this.state === StateMachineStates.NOT_CONFIGURED && (this[controlPointSymbol] !== undefined && this[packetPointSymbol] !== undefined)) {\n      this.state = StateMachineStates.IDLE\n    } else if(this.state === StateMachineStates.IDLE && (this[controlPointSymbol] === undefined ||  this[packetPointSymbol] === undefined)) {\n      this.state = StateMachineStates.NOT_CONFIGURED\n    }\n  }\n\n  /** get/set **/\n\n  get transfers () {\n    return this[transfersSymbol]\n  }\n\n\n  /** get/set **/\n\n  get progress () {\n    return this[progressSymbol]\n  }\n\n  set progress (value) {\n    if (value !== this[progressSymbol]) {\n      this[progressSymbol] = value\n      this.emit('progressChanged',{dfuStateMachine: this, progress: value})\n    }\n  }\n  /** get/set **/\n\n  get queue () {\n    return this[queueSymbol]\n  }\n\n\n  calculateProgress () {\n    switch (this.state) {\n      case StateMachineStates.NOT_CONFIGURED:\n        this.progress = 0.0\n        break\n      case StateMachineStates.IDLE:\n        this.progress = 0.0\n        break\n      case StateMachineStates.COMPLETE:\n        this.progress = 1.0\n        break\n      case StateMachineStates.FAILED:\n        this.progress = 1.0\n        break\n      case StateMachineStates.TRANSFERING:\n        if (this.transfers.length > 0) {\n          let completedTransfersCount = this.transfers.reduce((sum,value) => {\n            return (value.state === TransferStates.Failed || value.state === TransferStates.Completed) ? sum + 1 : sum\n          }, 0)\n          let percentageValue = 1.0 / this.transfers.length\n          let newProgress = percentageValue * completedTransfersCount\n          if(CurrentTransfer().state === TransferStates.Transfer) {\n            newProgress += percentageValue * CurrentTransfer().progress\n          }\n          this.progress = newProgress\n        }\n        break\n    }\n  }\n  /**\n    Internal method used to slot each part of a dfu zip for transfer to device\n  **/\n  addTransfer (transfer) {\n    this.transfers.push(transfer)\n    this.queue.push(transfer, (error) => {\n      if (error) {\n        this.queue.kill()\n        this.state = StateMachineStates.FAILED\n      } else if (transfer.state === StateMachineStates.FAILED) {\n        this.queue.kill()\n        this.state = StateMachineStates.FAILED\n      } else if(this.queue.length() === 0) {\n        this.state = StateMachineStates.COMPLETE\n      }\n    })\n  }\n\n  /**\n    Send a firmware to a device. Throws when parameter or state is invalid for sending a firmware\n  **/\n  sendFirmware (firmware) {\n    if (this.state === StateMachineStates.NOT_CONFIGURED) {\n      throw new Error('StateMachine is not configured with bluetooth characteristics')\n    }\n    if (this.state !== StateMachineStates.IDLE) {\n      throw new Error('Can only initate transfer when idle')\n    }\n    if (firmware instanceof Firmware === false) {\n      throw new Error('Firmware needs to be of class Firmware')\n    }\n    for(var section of firmware.sections) {\n      var updateFunc = (event) => {\n        this.calculateProgress()\n      }\n      let datTransfer = new Transfer(section.dat, this.controlPoint, this.packetPoint, TransferTypes.Command)\n      datTransfer.on('progressChanged', updateFunc)\n      let binTransfer = new Transfer(section.bin, this.controlPoint, this.packetPoint, TransferTypes.Data)\n      binTransfer.on('progressChanged', updateFunc)\n      this.addTransfer(datTransfer)\n      this.addTransfer(binTransfer)\n    }\n    this.state = StateMachineStates.TRANSFERING\n  }\n\n  reset () {\n    this.queue.kill()\n    this.state = StateMachineStates.IDLE\n  }\n}\n\nmodule.exports.DFUStateMachineStates = StateMachineStates\nmodule.exports.DFUStateMachine = StateMachine\n"]}