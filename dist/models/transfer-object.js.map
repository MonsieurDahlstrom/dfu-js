{"version":3,"sources":["../../src/models/transfer-object.js"],"names":["WriteActions","TransferObjectType","Command","Data","TransferObjectState","NotStarted","Creating","Transfering","Storing","Completed","Failed","TransferObject","offset","length","transfer","transferType","type","state","chunks","min","max","module","exports"],"mappings":";;;;;;;;;;AAqBA;;;;AACA;;IAAYA,Y;;AACZ;;;;;;;;AAWA,IAAMC,qBAAqB;AACzBC,WAAS,IADgB;AAEzBC,QAAM;AAFmB,CAA3B;;AAMA,IAAMC,sBAAsB;AAC1BC,cAAY,IADc;AAE1BC,YAAU,IAFgB;AAG1BC,eAAa,IAHa;AAI1BC,WAAS,IAJiB;AAK1BC,aAAW,IALe;AAM1BC,UAAQ;AANkB,CAA5B;;IAcMC,c;AAEJ,0BAAaC,MAAb,EAAqBC,MAArB,EAA6BC,QAA7B,EAAuCC,YAAvC,EAAqD;AAAA;;AAEnD,SAAKD,QAAL,GAAgBA,QAAhB;;AAEA,SAAKF,MAAL,GAAcA,MAAd;;AAEA,SAAKC,MAAL,GAAcA,MAAd;;AAEA,SAAKG,IAAL,GAAYD,YAAZ;;AAEA,SAAKE,KAAL,GAAab,oBAAoBC,UAAjC;;AAEA,SAAKa,MAAL,GAAc,EAAd;AACD;;;;8BAGUN,M,EAAQ;AACjB,UAAIO,MAAM,KAAKP,MAAf;AACA,UAAIQ,MAAMD,MAAM,KAAKN,MAArB;AACA,aAAOD,UAAUO,GAAV,IAAiBP,UAAUQ,GAAlC;AACD;;;;;AAIHC,OAAOC,OAAP,CAAeX,cAAf,GAAgCA,cAAhC;AACAU,OAAOC,OAAP,CAAelB,mBAAf,GAAqCA,mBAArC;AACAiB,OAAOC,OAAP,CAAerB,kBAAf,GAAoCA,kBAApC","file":"transfer-object.js","sourcesContent":["// Copyright (c) 2017 Monsieur DahlstrÃ¶m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport crc from 'crc'\nimport * as WriteActions from './write'\nimport TransmissionStatus from './transmission-types'\n\n// import {Task, TaskType, TaskResult} from './Task'\n\n\n\n/**\nNordic defines two different type of file transfers:\n    init package is known as Command object\n    firmware is known as Data object\n**/\nconst TransferObjectType = {\n  Command: 0x01,\n  Data: 0x02\n}\n\n/** Different states a TransferObject can be in **/\nconst TransferObjectState = {\n  NotStarted: 0x01,\n  Creating: 0x02,\n  Transfering: 0x03,\n  Storing: 0x04,\n  Completed: 0x05,\n  Failed: 0x06\n}\n\n/**\nNRF51/52 can not process a a whole binary file in one go,\nthe transfer of a full binary file is done by creating a string of TransferObjects\nwith a maximum size that the MCU reports via bluewooth\n**/\nclass TransferObject {\n\n  constructor (offset, length, transfer, transferType) {\n    // Reference to parent transfer that stores the file data\n    this.transfer = transfer\n    // The offset into the file data\n    this.offset = offset\n    // How long this object is\n    this.length = length\n    // TransferObjectType for this transfer object\n    this.type = transferType\n    // Initial state\n    this.state = TransferObjectState.NotStarted\n    //array that tracks all packages of data that needs to be transfered\n    this.chunks = []\n  }\n\n  /** convinence, returns a boolean for if a specific offset represents this object **/\n  hasOffset (offset) {\n    let min = this.offset\n    let max = min + this.length\n    return offset >= min && offset <= max\n  }\n\n}\n\nmodule.exports.TransferObject = TransferObject\nmodule.exports.TransferObjectState = TransferObjectState\nmodule.exports.TransferObjectType = TransferObjectType\n"]}