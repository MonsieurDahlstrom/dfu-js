{"version":3,"sources":["../../../src/models/firmware/index.js"],"names":["FirmwareType","Application","Bootloader","Softdevice","SoftdeviceBootloader","Invalid","NotConfigured","NOT_IN_USE_1","NOT_IN_USE_2","Firmware","zipFile","type","zip","sections","file","async","content","json","JSON","parse","manifest","application","bin_file","bin","dat_file","dat","section","push","console","log","bootloader","softdevice","softdevice_bootloader","module","exports","FirmwareSection"],"mappings":"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","file":"index.js","sourcesContent":["// Copyright (c) 2017 Monsieur Dahlstr√∂m Ltd\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a\r\n// copy of this software and associated documentation files (the\r\n// \"Software\"), to deal in the Software without restriction, including\r\n// without limitation the rights to use, copy, modify, merge, publish,\r\n// distribute, sublicense, and/or sell copies of the Software, and to permit\r\n// persons to whom the Software is furnished to do so, subject to the\r\n// following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included\r\n// in all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\r\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\r\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\r\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\r\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\nimport {Section} from './Section'\r\n\r\n/**\r\n  The different types of firmware updates a zip file can represent\r\n    currently only Application is fully implmented\r\n    http://infocenter.nordicsemi.com/topic/com.nordic.infocenter.sdk5.v12.2.0/ble_sdk_app_dfu_bootloader.html?cp=4_0_1_4_2_3_2#lib_dfu_image\r\n**/\r\nconst FirmwareType = {\r\n  Application: 0x01,\r\n  Bootloader: 0x02,\r\n  Softdevice: 0x04,\r\n  SoftdeviceBootloader: 0x08,\r\n  Invalid: 0x10,\r\n  NotConfigured: 0x20,\r\n  NOT_IN_USE_1: 0x40,\r\n  NOT_IN_USE_2: 0x80\r\n}\r\n\r\n/**\r\nFirmware, instances takes a zip file as input and unpacks the compressed update\r\n**/\r\nclass Firmware {\r\n\r\n  /** Create a new instance based on zip file and set inital state **/\r\n  constructor (zipFile) {\r\n    this.type = FirmwareType.NotConfigured\r\n    this.zip = zipFile\r\n    this.sections = []\r\n  }\r\n\r\n  /** parses the manifest and unpack the binaries **/\r\n  async parseManifest () {\r\n    if (!this.zip) {\r\n      this.type = FirmwareType.Invalid\r\n      return\r\n    }\r\n    let content = await this.zip.file('manifest.json').async('string')\r\n    let json = JSON.parse(content)\r\n    if (json.manifest.application) {\r\n      try {\r\n        let bin = await this.zip.file(json.manifest.application.bin_file).async('uint8Array')\r\n        let dat = await this.zip.file(json.manifest.application.dat_file).async('uint8Array')\r\n        let section = new Section(bin, dat, FirmwareType.Application)\r\n        this.sections.push(section)\r\n        this.type = FirmwareType.Application\r\n      } catch (e) {\r\n        console.log(e)\r\n      }\r\n    } else if (json.manifest.bootloader) {\r\n      try {\r\n        let bin = await this.zip.file(json.manifest.bootloader.bin_file).async(\"uint8array\")\r\n        let dat = await this.zip.file(json.manifest.bootloader.dat_file).async(\"uint8array\")\r\n        let section = new Section(bin, dat, FirmwareType.Bootloader)\r\n        this.sections.push(section)\r\n        this.type = FirmwareType.Bootloader\r\n      } catch (e) {\r\n        console.log('WWFirmwareUpdate.parseManifest bootloader ' + e)\r\n      }\r\n    } else if (json.manifest.softdevice) {\r\n      try {\r\n        let bin = await this.zip.file(json.manifest.softdevice.bin_file).async(\"uint8array\")\r\n        let dat = await this.zip.file(json.manifest.softdevice.dat_file).async(\"uint8array\")\r\n        let section = new Section(bin, dat, FirmwareType.Application)\r\n        this.sections.push(section)\r\n        this.type = FirmwareType.Softdevice\r\n      } catch (e) {\r\n        console.log('WWFirmwareUpdate.parseManifest softdevice ' + e)\r\n      }\r\n    } else if (json.manifest.softdevice_bootloader) {\r\n      try {\r\n        let bin = await this.zip.file(json.manifest.softdevice_bootloader.bin_file).async(\"uint8array\")\r\n        let dat = await this.zip.file(json.manifest.softdevice_bootloader.dat_file).async(\"uint8array\")\r\n        let section = new Section(bin, dat, FirmwareType.SoftdeviceBootloader)\r\n        this.sections.push(section)\r\n        this.type = FirmwareType.SoftdeviceBootloader\r\n      } catch (e) {\r\n        console.log('WWFirmwareUpdate.parseManifest softdevice & bootloader ' + e)\r\n      }\r\n\r\n    } else {\r\n      this.type = FirmwareType.Invalid\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports.Firmware = Firmware\r\nmodule.exports.FirmwareType = FirmwareType\r\nmodule.exports.FirmwareSection = Section\r\n"]}