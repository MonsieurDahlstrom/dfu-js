{"version":3,"sources":["../../../src/models/transfer/transfer.js"],"names":["fileSymbol","stateSymbol","packetPointSymbol","controlPointSymbol","tasksSymbol","objectsSymbol","maximumObjectLengthSymbol","typeSymbol","progressSymbol","Transfer","value","fileData","controlPoint","packetPoint","objectType","Prepare","Worker","error","task","console","state","progress","difference","currentObjectIndex","objects","length","dfuTask","Error","tasks","push","kill","Failed","addEventListener","onEvent","bind","operation","verify","addTask","removeEventListener","maxiumSize","currentOffset","currentCRC","maximumObjectLength","generateObjects","object","find","item","hasOffset","indexOf","validate","fileBegin","fileEnd","file","index","objectBegin","objectEnd","nextObject","event","dataView","target","getInt8","RESPONSE_CODE","log","opCode","responseCode","SELECT","SUCCESS","getUint32","prepareDFUObjects","undefined","eventHandler","calculateProgress","begin","Completed"],"mappings":"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","file":"transfer.js","sourcesContent":["\"use strict\";\r\n\r\n/** Library imports */\r\nimport queue from 'async/queue'\r\n/** internal imports */\r\nimport TransferStates from './states'\r\nimport {Task, TaskTypes, TaskResults} from '../task'\r\nimport {DFUObject} from '../dfu-object'\r\n\r\nvar fileSymbol = Symbol();\r\nvar stateSymbol = Symbol();\r\nvar packetPointSymbol = Symbol();\r\nvar controlPointSymbol = Symbol();\r\nvar tasksSymbol = Symbol();\r\nvar objectsSymbol = Symbol();\r\nvar maximumObjectLengthSymbol = Symbol()\r\nvar typeSymbol = Symbol()\r\nvar progressSymbol = Symbol()\r\n\r\nclass Transfer {\r\n  /** Get/Set pair **/\r\n  get file() {\r\n    return this[fileSymbol]\r\n  }\r\n\r\n  set file(value) {\r\n    this[fileSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get state() {\r\n    return this[stateSymbol]\r\n  }\r\n\r\n  set state(value) {\r\n    this[stateSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get packetPoint() {\r\n    return this[packetPointSymbol]\r\n  }\r\n\r\n  set packetPoint(value) {\r\n    this[packetPointSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get controlPoint() {\r\n    return this[controlPointSymbol]\r\n  }\r\n\r\n  set controlPoint(value) {\r\n    this[controlPointSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get tasks() {\r\n    return this[tasksSymbol]\r\n  }\r\n\r\n  set tasks(value) {\r\n    this[tasksSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get objects() {\r\n    return this[objectsSymbol]\r\n  }\r\n\r\n  set objects(value) {\r\n    this[objectsSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get maximumObjectLength() {\r\n    return this[maximumObjectLengthSymbol]\r\n  }\r\n\r\n  set maximumObjectLength(value) {\r\n    this[maximumObjectLengthSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get type() {\r\n    return this[typeSymbol]\r\n  }\r\n\r\n  set type(value) {\r\n    this[typeSymbol] = value\r\n  }\r\n\r\n  /** Get/Set pair **/\r\n  get progress() {\r\n    return this[progressSymbol]\r\n  }\r\n\r\n  set progress(value) {\r\n    this[progressSymbol] = value\r\n  }\r\n\r\n  constructor (fileData, controlPoint, packetPoint, objectType) {\r\n    this[stateSymbol] = TransferStates.Prepare\r\n    /** The WebBluetooth Characteristics needed to transfer a file **/\r\n    this[packetPointSymbol] = packetPoint\r\n    this[controlPointSymbol] = controlPoint\r\n    /** Data array representing the actual file to transfer **/\r\n    this[fileSymbol] = fileData\r\n    /** The DFUObjectType this file represents */\r\n    this[typeSymbol] = objectType\r\n    /** Create a queue to process the DFUObject's for this file in order */\r\n    this[tasksSymbol] = queue(Task.Worker, 1)\r\n    this[tasksSymbol].error = (error, task) => {\r\n      console.error(error)\r\n      console.error(task)\r\n    }\r\n    /** empty list of DFUObject */\r\n    this[objectsSymbol] = []\r\n  }\r\n\r\n  calculateProgress () {\r\n    switch (this.state) {\r\n      case TransferStates.Prepare:\r\n      {\r\n        this.progress = 0.0\r\n        break\r\n      }\r\n      case TransferStates.Transfer:\r\n      {\r\n        var difference = (this.currentObjectIndex+1) / this.objects.length\r\n        if (difference < 1.0) {\r\n          this.progress = difference - this.objects[this.currentObjectIndex].progress()\r\n        } else {\r\n          this.progress =  difference - 0.02\r\n        }\r\n        break\r\n      }\r\n      default:\r\n      {\r\n        this.progress =  1.0\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Schedules a BLE Action for execution and ensure the file transfer fail if an action cant be completed **/\r\n  addTask (dfuTask) {\r\n    if ((dfuTask instanceof Task) === false) {\r\n      throw new Error('task is not of type Task')\r\n    }\r\n    this.tasks.push(dfuTask, (error) => {\r\n      if (error) {\r\n        this.tasks.kill()\r\n        this.state = TransferStates.Failed\r\n        console.error(error)\r\n      }\r\n    })\r\n  }\r\n\r\n  /** Begin the tranfer of a file by asking the NRF51/52 for meta data and verify if the file has been transfered already **/\r\n  begin () {\r\n    this.controlPoint.addEventListener('characteristicvaluechanged', this.onEvent.bind(this))\r\n    let operation = Task.verify(this.objectType, this.controlPoint)\r\n    this.addTask(operation)\r\n  }\r\n\r\n  /** Clean up event registrations when transfer is completed **/\r\n  end () {\r\n    this.controlPoint.removeEventListener('characteristicvaluechanged', this.onEvent)\r\n  }\r\n\r\n  /**\r\n  Given the type of device and object type, the maxium size that can be processed\r\n  at a time varies. This method creates a set of DFUObject with this maxium size\r\n  set.\r\n\r\n  Secondly the device reports back how much of the file has been transfered and what the crc\r\n  so far is. This method skips object that has already been completed\r\n  **/\r\n  prepareDFUObjects (maxiumSize, currentOffset, currentCRC) {\r\n    this.maximumObjectLength = maxiumSize\r\n    this.currentObjectIndex = 0\r\n    this.generateObjects()\r\n    /** Skip to object for the offset **/\r\n    let object = this.objects.find((item) => item.hasOffset(currentOffset))\r\n    if (object) {\r\n      this.currentObjectIndex = this.objects.indexOf(object)\r\n    }\r\n    this.state = TransferStates.Transfer\r\n    this.objects[this.currentObjectIndex].validate(currentOffset, currentCRC)\r\n  }\r\n\r\n  /**\r\n  Internal convinence method.\r\n  **/\r\n  generateObjects () {\r\n    let fileBegin = 0\r\n    let fileEnd = this.file.length\r\n    let index = fileBegin\r\n    while (index < fileEnd) {\r\n      let objectBegin = index\r\n      let objectEnd = objectBegin + this.maximumObjectLength < fileEnd ? this.maximumObjectLength : (fileEnd - index)\r\n      let object = new DFUObject(objectBegin, objectEnd, this, this.objectType, this.nextObject.bind(this))\r\n      this.objects.push(object)\r\n      index += this.maximumObjectLength\r\n    }\r\n  }\r\n\r\n  /** handles events received on the Control Point Characteristic **/\r\n  onEvent (event) {\r\n    /** guard to filter events that are not response codes  */\r\n    let dataView = event.target.value\r\n    if (dataView && dataView.getInt8(0) !== TaskTypes.RESPONSE_CODE) {\r\n      console.log('Transfer.onEvent() opcode was not a response code')\r\n      return\r\n    }\r\n    switch (this.state) {\r\n      case TransferStates.Prepare: {\r\n        let opCode = dataView.getInt8(1)\r\n        let responseCode = dataView.getInt8(2)\r\n        if (opCode === TaskTypes.SELECT && responseCode === TaskResults.SUCCESS) {\r\n          let maxiumSize = dataView.getUint32(3, true)\r\n          let currentOffset = dataView.getUint32(7, true)\r\n          let currentCRC = dataView.getUint32(11, true)\r\n          this.prepareDFUObjects(maxiumSize, currentOffset, currentCRC)\r\n        }\r\n        break\r\n      }\r\n      default: {\r\n        if (this.objects !== undefined && this.objects[this.currentObjectIndex] !== undefined) {\r\n          this.objects[this.currentObjectIndex].eventHandler(dataView)\r\n        } else {\r\n          console.error('Transfer.onEvent called with no objects or no current object')\r\n        }\r\n        break\r\n      }\r\n    }\r\n    this.calculateProgress()\r\n  }\r\n\r\n  /** Checks if Transfer is complete or starts transferring the next DFUObject **/\r\n  nextObject () {\r\n    if (this.currentObjectIndex < this.objects.length - 1) {\r\n      this.tasks.kill()\r\n      this.currentObjectIndex++\r\n      this.objects[this.currentObjectIndex].begin()\r\n    } else {\r\n      this.state = TransferStates.Completed\r\n    }\r\n  }\r\n}\r\n\r\nexport default Transfer\r\n"]}