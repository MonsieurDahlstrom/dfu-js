{"version":3,"sources":["../../../src/models/transfer/transfer-worker.js"],"names":["TransferWorker","task","onCompleition","Error","stateUpdateFunction","event","state","Failed","end","Completed","on","begin","module","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;AACA;;;;;;;;;AAEA,IAAMA,iBAAiB,SAAjBA,cAAiB,CAAUC,IAAV,EAAgBC,aAAhB,EAA+B;AAAA;AAAA;;AACpD,MAAID,uCAA6B,KAAjC,EAAwC;AAAA;AAAA;;AACtC,UAAM,IAAIE,KAAJ,CAAU,0BAAV,CAAN;AACD,GAFD;AAAA;AAAA;AADoD;AAIpD,MAAI,CAACD,aAAL,EAAoB;AAAA;AAAA;;AAClB,UAAM,IAAIC,KAAJ,CAAU,0BAAV,CAAN;AACD,GAFD;AAAA;AAAA;AAJoD;AAOpD,MAAIC,sBAAsB,SAAtBA,mBAAsB,CAACC,KAAD,EAAW;AAAA;AAAA;;AACnC,QAAGA,MAAMC,KAAN,KAAgB,iBAAeC,MAAlC,EAA0C;AAAA;AAAA;;AACxCN,WAAKO,GAAL;AADwC;AAExCN,oBAAc,iBAAd;AACD,KAHD,MAGO;AAAA;AAAA;AAAA,YAAIG,MAAMC,KAAN,KAAgB,iBAAeG,SAAnC,EAA8C;AAAA;AAAA;;AACnDR,eAAKO,GAAL;AADmD;AAEnDN;AACD,SAHM;AAAA;AAAA;AAGN;AACF,GARD;AAPoD;AAgBpDD,OAAKS,EAAL,CAAQ,cAAR,EAAwBN,mBAAxB;AAhBoD;AAiBpDH,OAAKU,KAAL;AACD,CAlBD;;;AAoBAC,OAAOC,OAAP,CAAeb,cAAf,GAAgCA,cAAhC;kBACeA,c","file":"transfer-worker.js","sourcesContent":["/**\nTransfer class represents a binary file inside a firmware update zip.\nA firmware update consists of a init package and data file. The StateMachine\nparases the zip file and creates a transfer object for each entry in the zip\n\nThe statemachine uses a queue to slot the Transfers in order\n**/\nimport Transfer from './transfer'\nimport TransferStates from './states'\n\nconst TransferWorker = function (task, onCompleition) {\n  if (task instanceof Transfer === false) {\n    throw new Error('task is not of type Task')\n  }\n  if (!onCompleition) {\n    throw new Error('onCompleition is not set')\n  }\n  let stateUpdateFunction = (event) => {\n    if(event.state === TransferStates.Failed) {\n      task.end()\n      onCompleition('transfer failed')\n    } else if (event.state === TransferStates.Completed) {\n      task.end()\n      onCompleition()\n    }\n  }\n  task.on('stateChanged', stateUpdateFunction)\n  task.begin()\n}\n\nmodule.exports.TransferWorker = TransferWorker\nexport default TransferWorker\n"]}