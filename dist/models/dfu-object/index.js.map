{"version":3,"sources":["../../../src/models/dfu-object/index.js"],"names":["DATA_CHUNK_SIZE","lengthSymbol","typeSymbol","offsetSymbol","transferSymbol","onCompletitionSymbol","stateSymbol","DFUObject","offset","length","transfer","transferType","onCompletitionCallback","NotStarted","chunks","parentFileEnd","parentFileBegin","index","chunkBegin","chunkEnd","chunk","file","slice","push","state","Creating","addTask","verify","type","controlPoint","dataView","currentOffset","getUint32","currentCRC","validate","min","max","checksum","fileCRCToOffset","crc32","Storing","operation","execute","create","Transfering","toPackets","setPacketReturnNotification","sendChuncks","buffer","writePackage","packetPoint","opCode","getInt8","responseCode","SELECT","SUCCESS","onSelect","CREATE","onCreate","SET_PRN","onPacketNotification","console","log","CALCULATE_CHECKSUM","onChecksum","EXECUTE","onExecute","Completed","onCompletition","value","module","exports","DFUObjectStates"],"mappings":"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","file":"index.js","sourcesContent":["// Copyright (c) 2017 Monsieur Dahlstr√∂m Ltd\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\"use strict\";\n\nimport crc from 'crc'\n//\nimport {Task, TaskTypes, TaskResults} from '../task'\nimport DFUObjectStates from './states.js'\n\nconst DATA_CHUNK_SIZE = 20\n\n/**\nNRF51/52 can not process a a whole binary file in one go,\nthe transfer of a full binary file is done by creating a string of TransferObjects\nwith a maximum size that the MCU reports via bluewooth\n**/\n\nlet lengthSymbol = Symbol()\nlet typeSymbol = Symbol()\nlet offsetSymbol = Symbol()\nlet transferSymbol = Symbol()\nlet onCompletitionSymbol = Symbol()\nlet stateSymbol = Symbol()\n\nclass DFUObject  {\n\n  constructor (offset, length, transfer, transferType, onCompletitionCallback) {\n    // function to call when transfer completes or fails\n    this[onCompletitionSymbol] = onCompletitionCallback\n    // Reference to parent transfer that stores the file data\n    this[transferSymbol] = transfer\n    // The offset into the file data\n    this[offsetSymbol] = offset\n    // How long this object is\n    this[lengthSymbol] = length\n    // TransferObjectType for this transfer object\n    this[typeSymbol] = transferType\n    // Initial state\n    this[stateSymbol] = DFUObjectStates.NotStarted\n    //\n  }\n\n  /** get/set pair **/\n\n  get length () {\n    return this[lengthSymbol]\n  }\n\n  set length (value) {\n    this[lengthSymbol] = value\n  }\n\n  /** get/set pair **/\n\n  get type () {\n    return this[typeSymbol]\n  }\n\n  set type (value) {\n    this[typeSymbol] = value\n  }\n\n  /** get/set pair **/\n\n  get offset () {\n    return this[offsetSymbol]\n  }\n\n  set offset (value) {\n    this[offsetSymbol] = value\n  }\n\n  /** get/set pair **/\n\n  get transfer () {\n    return this[transferSymbol]\n  }\n\n  set transfer (value) {\n    this[transferSymbol] = value\n  }\n\n  /** get/set pair **/\n\n  get onCompletition () {\n    return this[onCompletitionSymbol]\n  }\n\n  set onCompletition (value) {\n    this[onCompletitionSymbol] = value\n  }\n\n  /** get/set pair **/\n\n  get state () {\n    return this[stateSymbol]\n  }\n\n  set state (value) {\n    this[stateSymbol] = value\n  }\n\n  /**\n    Internal convinence methods, a transfer object might have been partially\n    transfered already, if so the offset passed in is none zero.\n\n    Based on the offset and length into the Transfer objects file and the given\n    offset in this range, create the number of chunks needed.\n  **/\n  toPackets (offset) {\n    this.chunks = []\n    let parentFileEnd = this.offset + this.length\n    let parentFileBegin = this.offset + offset\n    let index = parentFileBegin\n    while (index < parentFileEnd) {\n      let chunkBegin = index\n      let chunkEnd = chunkBegin + DATA_CHUNK_SIZE < parentFileEnd ? chunkBegin + DATA_CHUNK_SIZE : chunkBegin + (parentFileEnd - index)\n      let chunk = this.transfer.file.slice(chunkBegin, chunkEnd)\n      this.chunks.push(chunk)\n      index += DATA_CHUNK_SIZE\n    }\n  }\n\n  /** The first step in transferring this object, ask how much has already been transferred **/\n  begin () {\n    this.state = DFUObjectStates.Creating\n    this.transfer.addTask(Task.verify(this.type, this.transfer.controlPoint))\n  }\n\n  /** internal convinence method, extract how much of an object that has already been transfered **/\n  verify (dataView) {\n    let currentOffset = dataView.getUint32(7, true)\n    let currentCRC = dataView.getUint32(11, true)\n    this.validate(currentOffset, currentCRC)\n  }\n\n  /** convinence, returns a boolean for if a specific offset represents this object **/\n  hasOffset (offset) {\n    let min = this.offset\n    let max = min + this.length\n    return offset >= min && offset <= max\n  }\n\n  /** Given an offset & checksum, take the appropirate next action **/\n  validate (offset, checksum) {\n    /** The checksum reported back from a NRF51/52 is a crc of the Transfer object's file up till the offset */\n    let fileCRCToOffset = crc.crc32(this.transfer.file.slice(0, offset))\n    if (offset === this.offset + this.length && checksum === fileCRCToOffset) {\n      /** Object has been transfered and should be moved into its right place on the device **/\n      this.state = DFUObjectStates.Storing\n      let operation = Task.execute(this.transfer.controlPoint)\n      this.transfer.addTask(operation)\n    } else if (offset === this.offset || offset > this.offset + this.length || checksum !== fileCRCToOffset) {\n      /** This object has not been trasnfered to the device or is faulty, recreate and transfer a new **/\n      this.state = DFUObjectStates.Creating\n      let operation = Task.create(this.type, this.length, this.transfer.controlPoint)\n      this.transfer.addTask(operation)\n    } else {\n      /** its the right object on the device but it has not been transfred fully **/\n      this.state = DFUObjectStates.Transfering\n      this.toPackets(offset)\n      this.transfer.addTask(this.setPacketReturnNotification())\n      this.sendChuncks()\n    }\n  }\n\n  /** Slots all data chunks for transmission, the queue inside Transfer ensures the order **/\n  sendChuncks () {\n    for (let index = 0; index < this.chunks.length; index++) {\n      let buffer = this.chunks[index].buffer\n      this.transfer.addTask(Task.writePackage(buffer, this.transfer.packetPoint))\n    }\n  }\n\n  /** Request a notification when all packets for this transferObject has been received on the device **/\n  setPacketReturnNotification () {\n    return Task.setPacketReturnNotification(this.chunks.length, this.transfer.controlPoint)\n  }\n\n  /** handles events received on the Control Point Characteristic **/\n  eventHandler (dataView) {\n    /** Depending on which state this object is handle the relevent opcodes */\n    let opCode = dataView.getInt8(1)\n    let responseCode = dataView.getInt8(2)\n    switch (this.state) {\n      case DFUObjectStates.Creating: {\n        if (opCode === TaskTypes.SELECT && responseCode === TaskResults.SUCCESS) {\n          this.onSelect(dataView)\n        } else if (opCode === TaskTypes.CREATE && responseCode === TaskResults.SUCCESS) {\n          this.onCreate(dataView)\n        } else if (opCode === TaskTypes.SET_PRN && responseCode === TaskResults.SUCCESS) {\n          this.onPacketNotification(dataView)\n        } else {\n          console.log('  Operation: ' + opCode + ' Result: ' + responseCode)\n        }\n        break\n      }\n      case DFUObjectStates.Transfering: {\n        if (opCode === TaskTypes.CALCULATE_CHECKSUM && responseCode === TaskResults.SUCCESS) {\n          this.onChecksum(dataView)\n        } else if (opCode === TaskTypes.SET_PRN && responseCode === TaskResults.SUCCESS) {\n          this.onPacketNotification(dataView)\n        } else {\n          console.log('  Operation: ' + opCode + ' Result: ' + responseCode)\n        }\n        break\n      }\n      case DFUObjectStates.Storing: {\n        if (opCode === TaskTypes.EXECUTE && responseCode === TaskResults.SUCCESS) {\n          this.onExecute()\n        } else if (opCode === TaskTypes.SET_PRN && responseCode === TaskResults.SUCCESS) {\n          this.onPacketNotification(dataView)\n        } else {\n          console.log('  Operation: ' + opCode + ' Result: ' + responseCode)\n        }\n        break\n      }\n    }\n  }\n\n  onSelect (dataView) {\n    /** verify how much how the transfer that has been completed */\n    this.verify(dataView)\n  }\n\n  onCreate (dataView) {\n    this.state = DFUObjectStates.Transfering\n    /** start the transfer of the object  */\n    this.toPackets(0)\n    this.transfer.addTask(this.setPacketReturnNotification())\n    this.sendChuncks()\n  }\n\n  onChecksum (dataView) {\n    /** verify how much how the transfer that has been completed */\n    let offset = dataView.getUint32(3, true)\n    let checksum = dataView.getUint32(7, true)\n    this.validate(offset, checksum)\n  }\n\n  onPacketNotification (dataView) {\n  }\n\n  onExecute (dataView) {\n    this.state = DFUObjectStates.Completed\n    this.onCompletition()\n  }\n}\n\nmodule.exports.DFUObject = DFUObject\nmodule.exports.DFUObjectStates = DFUObjectStates\n"]}