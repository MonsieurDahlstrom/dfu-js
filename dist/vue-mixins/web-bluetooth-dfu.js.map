{"version":3,"sources":["../../src/vue-mixins/web-bluetooth-dfu.js"],"names":["WebBluetoothDFU","data","dfuFirmware","undefined","dfuStateMachine","dfuState","NOT_CONFIGURED","dfuProgress","beforeMount","on","updateDFUProgress","updateDFUState","controlPoint","webBluetoothControlPoint","packetPoint","webBluetoothPacketPoint","computed","Error","dfuIdle","IDLE","dfuInProgress","TRANSFERING","dfuCompleted","COMPLETE","FAILED","methods","firmwareFromZip","zip","parseManifest","resetDFU","reset","performDFU","sendFirmware","payload","state","progress"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,kBAAkB;AACvBC,QAAM,gBAAW;AAAE,WAAO,EAAEC,aAAaC,SAAf,EAA0BC,iBAAiB,mCAA3C,EAAkEC,UAAU,oCAAsBC,cAAlG,EAAkHC,aAAa,GAA/H,EAAP;AAA4I,GADxI;AAEtBC,eAAa,uBAAY;AACvB,SAAKJ,eAAL,CAAqBK,EAArB,CAAwB,iBAAxB,EAA2C,KAAKC,iBAAhD;AACA,SAAKN,eAAL,CAAqBK,EAArB,CAAwB,cAAxB,EAAwC,KAAKE,cAA7C;;AAEA,SAAKP,eAAL,CAAqBQ,YAArB,GAAoC,KAAKC,wBAAzC;AACA,SAAKT,eAAL,CAAqBU,WAArB,GAAmC,KAAKC,uBAAxC;AACD,GARqB;AAStBC,YAAU;AACRH,8BAA0B,oCAAY;AACpC,YAAM,IAAII,KAAJ,CAAU,kFAAV,CAAN;AACD,KAHO;AAIRF,6BAAyB,mCAAY;AACnC,YAAM,IAAIE,KAAJ,CAAU,iFAAV,CAAN;AACD,KANO;AAORC,aAAS,mBAAY;AACnB,aAAO,KAAKb,QAAL,KAAkB,oCAAsBc,IAA/C;AACD,KATO;AAURC,mBAAe,yBAAY;AACzB,aAAO,KAAKf,QAAL,KAAkB,oCAAsBgB,WAA/C;AACD,KAZO;AAaRC,kBAAc,wBAAY;AACxB,aAAQ,KAAKjB,QAAL,KAAkB,oCAAsBkB,QAAxC,IAAoD,KAAKlB,QAAL,KAAkB,oCAAsBmB,MAApG;AACD;AAfO,GATY;AA0BtBC,WAAS;AACPC;AAAA,4EAAiB,iBAAgBC,GAAhB;AAAA;AAAA;AAAA;AAAA;AACf,qBAAKzB,WAAL,GAAmB,uBAAayB,GAAb,CAAnB;AADe;AAAA,uBAET,KAAKzB,WAAL,CAAiB0B,aAAjB,EAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjB;;AAAA;AAAA;AAAA;;AAAA;AAAA,OADO;AAKTC,cAAU,oBAAW;AACpB,WAAKzB,eAAL,CAAqB0B,KAArB;AACA,KAPQ;AAQPC,gBAAY,sBAAW;AACrB,WAAK3B,eAAL,CAAqB4B,YAArB,CAAkC,KAAK9B,WAAvC;AACD,KAVM;AAWPS,oBAAgB,wBAAUsB,OAAV,EAAmB;AACjC,WAAK5B,QAAL,GAAgB4B,QAAQC,KAAxB;AACD,KAbM;AAcPxB,uBAAmB,2BAAUuB,OAAV,EAAmB;AACpC,WAAK1B,WAAL,GAAmB0B,QAAQE,QAA3B;AACD;AAhBM;AA1Ba,CAAxB;;kBA8CenC,e","file":"web-bluetooth-dfu.js","sourcesContent":["import {Firmware, FirmwareType} from '../models/firmware'\nimport {DFUStateMachine, DFUStateMachineStates} from '../models/state-machine'\n\nconst WebBluetoothDFU = {\n\tdata: function() { return { dfuFirmware: undefined, dfuStateMachine: new DFUStateMachine(), dfuState: DFUStateMachineStates.NOT_CONFIGURED, dfuProgress: 0.0} },\n  beforeMount: function () {\n    this.dfuStateMachine.on('progressChanged', this.updateDFUProgress)\n    this.dfuStateMachine.on('stateChanged', this.updateDFUState)\n    // `this` points to the vm instance\n    this.dfuStateMachine.controlPoint = this.webBluetoothControlPoint\n    this.dfuStateMachine.packetPoint = this.webBluetoothPacketPoint\n  },\n  computed: {\n    webBluetoothControlPoint: function () {\n      throw new Error('DFUMixin expects component to provide computed property webBluetoothControlPoint')\n    },\n    webBluetoothPacketPoint: function () {\n      throw new Error('DFUMixin expects component to provide computed property webBluetoothPacketPoint')\n    },\n    dfuIdle: function () {\n      return this.dfuState === DFUStateMachineStates.IDLE\n    },\n    dfuInProgress: function () {\n      return this.dfuState === DFUStateMachineStates.TRANSFERING\n    },\n    dfuCompleted: function () {\n      return (this.dfuState === DFUStateMachineStates.COMPLETE || this.dfuState === DFUStateMachineStates.FAILED)\n    }\n  },\n  methods: {\n    firmwareFromZip: async function (zip) {\n      this.dfuFirmware = new Firmware(zip)\n      await this.dfuFirmware.parseManifest()\n    },\n\t\tresetDFU: function() {\n\t\t\tthis.dfuStateMachine.reset()\n\t\t},\n    performDFU: function() {\n      this.dfuStateMachine.sendFirmware(this.dfuFirmware)\n    },\n    updateDFUState: function (payload) {\n      this.dfuState = payload.state\n    },\n    updateDFUProgress: function (payload) {\n      this.dfuProgress = payload.progress\n    }\n  }\n}\n\nexport default WebBluetoothDFU\n"]}