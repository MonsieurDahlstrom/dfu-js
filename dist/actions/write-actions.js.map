{"version":3,"sources":["../../src/actions/write-actions.js"],"names":["MutationTypes","WriteActions","webBluetoothDFUScheduleWrite","write","dispatch","commit","Write","ADD_WRITE","webBluetoothDFUWriteRemove","REMOVE_WRITE","webBluetoothDFUExecuteWrite","state","Transfering","UPDATE_WRITE","attempts","characteristic","writeValue","bytes","error","undefined","Completed","Failed","webBluetoothDFUTickWrites","payload","console","log","nextWrite","writes","find","writeRecord","Prepared"],"mappings":";;;;;;;;;;;;;;AAAA;;IAAYA,a;;AACZ;;;;AACA;;;;;;;;AAEA,IAAMC,eAAe;AAEbC,8BAFa;AAAA,kGAEsCC,KAFtC;AAAA,UAEkBC,QAFlB,QAEkBA,QAFlB;AAAA,UAE4BC,MAF5B,QAE4BA,MAF5B;AAAA;AAAA;AAAA;AAAA;AAGjB,kBAAGF,iBAAiB,gBAAMG,KAA1B,EAAiC;AAC/BD,uBAAOL,cAAcO,SAArB,EAAgCJ,KAAhC;AACD;;AALgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAQbK,4BARa;AAAA,oGAQqCL,KARrC;AAAA,UAQiBC,QARjB,SAQiBA,QARjB;AAAA,UAQ2BC,MAR3B,SAQ2BA,MAR3B;AAAA;AAAA;AAAA;AAAA;AASjB,kBAAGF,iBAAiB,gBAAMG,KAA1B,EAAiC;AAC/BD,uBAAOL,cAAcS,YAArB,EAAmCN,KAAnC;AACD;;AAXgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAcbO,6BAda;AAAA,oGAcsCP,KAdtC;AAAA,UAckBC,QAdlB,SAckBA,QAdlB;AAAA,UAc4BC,MAd5B,SAc4BA,MAd5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAedF,iBAAiB,gBAAMG,KAfT;AAAA;AAAA;AAAA;;AAgBfH,oBAAMQ,KAAN,GAAc,4BAAmBC,WAAjC;AACAP,qBAAOL,cAAca,YAArB,EAAmCV,KAAnC;AACIW,sBAlBW,GAkBA,CAlBA;;AAAA;AAAA;AAAA;AAAA,qBAqBLX,MAAMY,cAAN,CAAqBC,UAArB,CAAgCb,MAAMc,KAAtC,CArBK;;AAAA;AAsBXd,oBAAMe,KAAN,GAAcC,SAAd;AACAhB,oBAAMQ,KAAN,GAAc,4BAAmBS,SAAjC;AACAN,yBAAW,CAAX;AAxBW;AAAA;;AAAA;AAAA;AAAA;;AA0BXA;AACAX,oBAAMe,KAAN;AACAf,oBAAMQ,KAAN,GAAc,4BAAmBU,MAAjC;;AA5BW;AAAA,kBA8BNP,WAAW,CA9BL;AAAA;AAAA;AAAA;;AAAA;AA+BfT,qBAAOL,cAAca,YAArB,EAAmCV,KAAnC;;AA/Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAmCbmB,2BAnCa;AAAA,oGAmC0CC,OAnC1C;AAAA,UAmCenB,QAnCf,SAmCeA,QAnCf;AAAA,UAmCyBC,MAnCzB,SAmCyBA,MAnCzB;AAAA,UAmCiCM,KAnCjC,SAmCiCA,KAnCjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAoCjBa,sBAAQC,GAAR,CAAY,2BAAZ;AACAD,sBAAQC,GAAR,CAAYd,KAAZ;AACIe,uBAtCa,GAsCDf,MAAMgB,MAAN,CAAaC,IAAb,CAAkB,uBAAe;AAC/C,uBAAOC,YAAYlB,KAAZ,KAAsB,4BAAmBC,WAAzC,IAAwDiB,YAAYlB,KAAZ,KAAsB,4BAAmBmB,QAAxG;AACD,eAFe,CAtCC;;AAyCjB,kBAAIJ,aAAaA,UAAUf,KAAV,KAAoB,4BAAmBmB,QAAxD,EAAkE;AAChE1B,yBAAS,6BAAT,EAAwCsB,SAAxC;AACD;;AA3CgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,CAArB;;kBA+CezB,Y","file":"write-actions.js","sourcesContent":["import * as MutationTypes from './../mutation-types'\nimport TransmissionStatus from './../models/transmission-types'\nimport Write from '../models/write'\n\nconst WriteActions = {\n\n  async webBluetoothDFUScheduleWrite({ dispatch, commit }, write) {\n    if(write instanceof Write.Write) {\n      commit(MutationTypes.ADD_WRITE, write)\n    }\n  },\n\n  async webBluetoothDFUWriteRemove ({ dispatch, commit }, write) {\n    if(write instanceof Write.Write) {\n      commit(MutationTypes.REMOVE_WRITE, write)\n    }\n  },\n\n  async webBluetoothDFUExecuteWrite ({ dispatch, commit }, write) {\n    if(write instanceof Write.Write) {\n      write.state = TransmissionStatus.Transfering\n      commit(MutationTypes.UPDATE_WRITE, write)\n      var attempts = 3;\n      do {\n        try {\n          await write.characteristic.writeValue(write.bytes)\n          write.error = undefined\n          write.state = TransmissionStatus.Completed\n          attempts = 0\n        } catch (err) {\n          attempts--\n          write.error = err\n          write.state = TransmissionStatus.Failed\n        }\n      } while (attempts > 0);\n      commit(MutationTypes.UPDATE_WRITE, write)\n    }\n  },\n\n  async webBluetoothDFUTickWrites({ dispatch, commit, state }, payload) {\n    console.log('webBluetoothDFUTickWrites')\n    console.log(state)\n    let nextWrite = state.writes.find(writeRecord => {\n      return writeRecord.state === TransmissionStatus.Transfering || writeRecord.state === TransmissionStatus.Prepared\n    })\n    if (nextWrite && nextWrite.state === TransmissionStatus.Prepared) {\n      dispatch('webBluetoothDFUExecuteWrite', nextWrite)\n    }\n  }\n}\n\nexport default WriteActions\n"]}