{"version":3,"sources":["../../src/actions/transfer-actions.js"],"names":["MutationTypes","GenerateObjects","dispatch","transfer","fileBegin","fileEnd","file","length","index","objectBegin","objectEnd","maxObjectLength","object","objectType","objects","push","TransferActions","webBluetoothDFUTransferAdd","commit","controlPointEventHandler","event","dataView","target","value","controlPoint","addEventListener","ADD_TRANSFER","webBluetoothDFUTransferRemove","removeEventListener","REMOVE_TRANSFER","webBluetoothDFUTransferBegin","write","Verify","UPDATE_TRANSFER","webBluetoothDFUTransferPrepare","payload","console","log","maxiumSize","currentOffset","offset","currentCRC","checksum","currentObjectIndex","find","item","hasOffset","indexOf","validatePayload","transferObject","webBluetoothDFUTransferNextObject","state","Completed","webBluetoothDFUTransferEventHandler","getInt8","Actions","RESPONSE_CODE","opCode","responseCode","SELECT","Responses","SUCCESS","Prepare","getUint32"],"mappings":"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","file":"transfer-actions.js","sourcesContent":["import Write from '../models/write'\nimport * as MutationTypes from '../mutation-types'\nimport TransmissionStatus from '../models/transmission-types'\nimport {TransferObject} from '../models/transfer-object'\n\nconst GenerateObjects = async function (dispatch, transfer) {\n  let fileBegin = 0\n  let fileEnd = transfer.file.length\n  let index = fileBegin\n  while (index < fileEnd) {\n    let objectBegin = index\n    let objectEnd = objectBegin + transfer.maxObjectLength < fileEnd ? transfer.maxObjectLength : (fileEnd - index)\n    let object = new TransferObject(objectBegin, objectEnd, transfer, transfer.objectType)\n    object.transfer = transfer\n    transfer.objects.push(object)\n    dispatch('webBluetoothDFUObjectAdd', object)\n    index += transfer.maxObjectLength\n  }\n}\n\nconst TransferActions = {\n\n  async webBluetoothDFUTransferAdd({ dispatch, commit }, transfer) {\n    transfer.controlPointEventHandler = async function(event) {\n      await dispatch('webBluetoothDFUTransferEventHandler', {transfer: transfer, dataView: event.target.value})\n      await dispatch('webBluetoothDFUTickWrites')\n    }\n    transfer.controlPoint.addEventListener('characteristicvaluechanged', transfer.controlPointEventHandler)\n    commit(MutationTypes.ADD_TRANSFER, transfer)\n  },\n\n  /** Clean up event registrations when transfer is completed **/\n  async webBluetoothDFUTransferRemove({ dispatch, commit }, transfer) {\n    transfer.controlPoint.removeEventListener('characteristicvaluechanged', transfer.controlPointEventHandler)\n    commit(MutationTypes.REMOVE_TRANSFER, transfer)\n  },\n\n  /** Begin the tranfer of a file by asking the NRF51/52 for meta data and verify if the file has been transfered already **/\n  async webBluetoothDFUTransferBegin({ dispatch, commit }, transfer) {\n    let write = new Write.Verify(transfer.controlPoint, transfer.objectType)\n    await dispatch('webBluetoothDFUScheduleWrite', write)\n    dispatch('webBluetoothDFUExecuteWrite', write)\n    commit(MutationTypes.UPDATE_TRANSFER, transfer)\n  },\n\n  /**\n  Given the type of device and object type, the maxium size that can be processed\n  at a time varies. This method creates a set of TransferObject with this maxium size\n  set.\n\n  Secondly the device reports back how much of the file has been transfered and what the crc\n  so far is. This method skips object that has already been completed\n  **/\n  async webBluetoothDFUTransferPrepare({ dispatch, commit }, payload) {\n    console.log('webBluetoothDFUTransferPrepare')\n    let transfer = payload.transfer\n    let maxiumSize = payload.maxiumSize\n    let currentOffset = payload.offset\n    let currentCRC = payload.checksum\n    //\n    transfer.maxObjectLength = maxiumSize\n    transfer.objects = []\n    transfer.currentObjectIndex = 0\n    GenerateObjects(dispatch, transfer)\n    /** Skip to object for the offset **/\n    let object = transfer.objects.find((item) => item.hasOffset(currentOffset))\n    if (object) {\n      transfer.currentObjectIndex = transfer.objects.indexOf(object)\n    }\n    let validatePayload = {checksum: currentCRC, offset: currentOffset, transferObject: transfer.objects[transfer.currentObjectIndex]}\n    dispatch('webBluetoothDFUObjectValidate', validatePayload)\n    commit(MutationTypes.UPDATE_TRANSFER, transfer)\n  },\n\n  /** Checks if Transfer is complete or starts transferring the next TransferObject **/\n  async webBluetoothDFUTransferNextObject({ dispatch, commit }, transfer) {\n    console.log('webBluetoothDFUTransferNextObject')\n    if (transfer.currentObjectIndex < transfer.objects.length - 1) {\n      transfer.currentObjectIndex++\n      dispatch('webBluetoothDFUObjectBegin', transfer.objects[transfer.currentObjectIndex])\n    } else {\n      transfer.state = TransmissionStatus.Completed\n    }\n    commit(MutationTypes.UPDATE_TRANSFER, transfer)\n  },\n\n  /** handles events received on the Control Point Characteristic **/\n  async webBluetoothDFUTransferEventHandler({ dispatch, commit }, payload) {\n    console.log('webBluetoothDFUTransferEventHandler');\n    let dataView = payload.dataView\n    let transfer = payload.transfer\n    /** guard to filter events that are not response codes  */\n    if(dataView.getInt8(0) !== Write.Actions.RESPONSE_CODE) {\n      return\n    }\n    let opCode = dataView.getInt8(1)\n    let responseCode = dataView.getInt8(2)\n    if (opCode === Write.Actions.SELECT && responseCode === Write.Responses.SUCCESS && transfer.state === TransmissionStatus.Prepare) {\n      await dispatch('webBluetoothDFUTransferPrepare', {checksum: dataView.getUint32(11, true), offset:  dataView.getUint32(7, true), maxiumSize: dataView.getUint32(3, true), transfer: transfer})\n    } else {\n      if (transfer.currentObjectIndex >= 0) {\n        var transferObject = transfer.objects[transfer.currentObjectIndex]\n        if(transferObject) {\n          await dispatch('webBluetoothDFUObjectHandleEvent', {dataView: dataView, transferObject: transferObject})\n        }\n      }\n    }\n    console.log('webBluetoothDFUTransferEventHandler DONE');\n  }\n\n}\n\nexport default TransferActions\n"]}